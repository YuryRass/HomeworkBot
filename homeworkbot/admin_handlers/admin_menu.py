from enum import Enum, auto

from aiogram import Router
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from database.main_db import admin_crud
from homeworkbot.filters import IsOnlyAdminCommands
from homeworkbot.admin_handlers.add_chat import _handle_add_chat
from homeworkbot.admin_handlers.add_teacher import _handle_add_teacher
from homeworkbot.admin_handlers.utils import create_teachers_button
from homeworkbot.admin_handlers.add_student import _handle_add_student
from homeworkbot.admin_handlers.add_discipline import _handle_add_discipline
from homeworkbot.admin_handlers.add_students_group import _handle_add_students_group
from homeworkbot.admin_handlers.utils import create_groups_button
from homeworkbot.admin_handlers.unban_student import create_unban_student_buttons

from homeworkbot import bot
router: Router = Router()


class AdminException(Exception):
    ...


class AdminCommand(Enum):
    """
        –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    ADD_GROUP = auto()
    ADD_TEACHER = auto()
    ADD_STUDENT = auto()
    ADD_DISCIPLINE = auto()
    ADD_CHAT = auto()
    SET_TEACHER_TO_GROUP = auto()
    SET_TEACHER_TO_DISCIPLINE = auto()
    BAN_STUDENT = auto()
    UNBAN_STUDENT = auto()
    UPLOAD_CONFIGURATION = auto()
    UPLOAD_TESTS = auto()
    ADD_STUDENTS_GROUP = auto()
    NEXT = auto()
    BACK = auto()
    DELETE_STUDENT = auto()
    DELETE_TEACHER = auto()
    DELETE_GROUP = auto()
    DOWNLOAD_FULL_REPORT = auto()
    DOWNLOAD_SHORT_REPORT = auto()
    DOWNLOAD_FINISH_REPORT = auto()
    DOWNLOAD_ANSWER = auto()
    DOWNLOAD_ALL_ANSWER_WITH_TEST = auto()
    SWITCH_TO_TEACHER = auto()


# —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
__admin_commands = {
    AdminCommand.UPLOAD_TESTS: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã',
    AdminCommand.UPLOAD_CONFIGURATION: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
    AdminCommand.BAN_STUDENT: '–ó–∞–±–∞–Ω–∏—Ç—å',
    AdminCommand.UNBAN_STUDENT: '–†–∞–∑–±–∞–Ω–∏—Ç—å',
    AdminCommand.SET_TEACHER_TO_DISCIPLINE: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
    AdminCommand.SET_TEACHER_TO_GROUP: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥—É –≥—Ä—É–ø–ø—É',
    AdminCommand.ADD_STUDENTS_GROUP: '–î–æ–±. –≥—Ä. —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
    AdminCommand.ADD_STUDENT: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞',
    AdminCommand.ADD_TEACHER: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞',
    AdminCommand.ADD_DISCIPLINE: '–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
    AdminCommand.ADD_CHAT: '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç',
    AdminCommand.NEXT: '‚û°',
    AdminCommand.BACK: '‚¨Ö',
    AdminCommand.DELETE_STUDENT: '–£–¥–∞–ª. —Å—Ç—É–¥–µ–Ω—Ç–∞',
    AdminCommand.DELETE_GROUP: '–£–¥–∞–ª. –≥—Ä—É–ø–ø—É',
    AdminCommand.DELETE_TEACHER: '–£–¥–∞–ª. –ø—Ä–µ–ø–æ–¥–∞',
    AdminCommand.DOWNLOAD_ANSWER: '–°–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã',
    AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST: '–°–∫–∞—á–∞—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã',
    AdminCommand.DOWNLOAD_FULL_REPORT: '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç',
    AdminCommand.DOWNLOAD_SHORT_REPORT: '–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç',
    AdminCommand.DOWNLOAD_FINISH_REPORT: '–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç',
    AdminCommand.SWITCH_TO_TEACHER: 'üë®‚Äçüè´'
}


def first_admin_keyboard(message: Message) -> ReplyKeyboardMarkup:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
    btns_1: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.ADD_TEACHER]),
            KeyboardButton(text=__admin_commands[AdminCommand.ADD_CHAT])
        ]

    btns_2: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.ADD_STUDENT]),
            KeyboardButton(text=__admin_commands[AdminCommand.ADD_DISCIPLINE]),
            KeyboardButton(text=__admin_commands[AdminCommand.ADD_STUDENTS_GROUP])
        ]

    btns_3: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.SET_TEACHER_TO_DISCIPLINE]),
            KeyboardButton(text=__admin_commands[AdminCommand.SET_TEACHER_TO_GROUP])
        ]

    footer_buttons = [] # –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è

    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —è–≤–ª—è–µ—Ç—Å—è –∏ –ø—Ä–µ–ø–æ–¥–æ–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ
    # –æ–¥–Ω—É –∫–ª–∞–≤–∏—à—É –≤ footer_buttons –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º –ø—Ä–µ–ø–æ–¥–∞
    if admin_crud.is_teacher(message.from_user.id):
        footer_buttons.append(KeyboardButton(text=__admin_commands[AdminCommand.SWITCH_TO_TEACHER]))
    footer_buttons.append(KeyboardButton(text=__admin_commands[AdminCommand.NEXT]))
    kb_builder.row(*btns_1)
    kb_builder.row(*btns_2)
    kb_builder.row(*btns_3)
    kb_builder.row(*footer_buttons)
    return kb_builder.as_markup()


def second_admin_keyboard(message: Message | None = None) -> ReplyKeyboardMarkup:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ç–æ—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
    btns_1: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.DOWNLOAD_ANSWER]),
            KeyboardButton(text=__admin_commands[AdminCommand.DOWNLOAD_FINISH_REPORT])
        ]

    btns_2: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.DOWNLOAD_FULL_REPORT]),
            KeyboardButton(text=__admin_commands[AdminCommand.DOWNLOAD_SHORT_REPORT])
        ]

    btns_3: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST]),
            KeyboardButton(text=__admin_commands[AdminCommand.BAN_STUDENT]),
            KeyboardButton(text=__admin_commands[AdminCommand.UNBAN_STUDENT])
        ]

    btns_4: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.BACK]),
            KeyboardButton(text=__admin_commands[AdminCommand.NEXT])
        ]
    kb_builder.row(*btns_1)
    kb_builder.row(*btns_2)
    kb_builder.row(*btns_3)
    kb_builder.row(*btns_4)


    return kb_builder.as_markup()


def third__admin_keyboard(message: Message | None = None) -> ReplyKeyboardMarkup:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ—Ç—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
    btns_1: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.DELETE_GROUP]),
            KeyboardButton(text=__admin_commands[AdminCommand.DELETE_TEACHER]),
            KeyboardButton(text=__admin_commands[AdminCommand.DELETE_STUDENT])
        ]
    btns_2: list(KeyboardButton) = \
        [
            KeyboardButton(text=__admin_commands[AdminCommand.UPLOAD_TESTS]),
            KeyboardButton(text=__admin_commands[AdminCommand.UPLOAD_CONFIGURATION])
        ]

    btns_3: list(KeyboardButton) = KeyboardButton(text=__admin_commands[AdminCommand.BACK])

    kb_builder.row(*btns_1)
    kb_builder.row(*btns_2)
    kb_builder.row(btns_3)
    return kb_builder.as_markup()


def get_current_admin_command(command: str) -> AdminCommand:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞ (–∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ AdminCommand)
        –ø–æ –µ–µ –∑–Ω–∞—á–µ–Ω–∏—é command.
    """
    for key, value in __admin_commands.items():
        if value == command:
            return key
    raise AdminException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


# —Å–ª–æ–≤–∞—Ä—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Teleagram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
__menu_index: dict[int, int] = {}

# —Å–ø–∏—Å–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∞–¥–º–∏–Ω–∞.
__menu_list = [
    first_admin_keyboard,
    second_admin_keyboard,
    third__admin_keyboard,
]


@router.message(IsOnlyAdminCommands(__admin_commands))
async def handle_commands(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """

    # –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–º
    # –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é match
    command = get_current_admin_command(message.text)
    match command:
        case AdminCommand.ADD_CHAT:
            await _handle_add_chat(message, state)
        case AdminCommand.ADD_STUDENT:
            await _handle_add_student(message, state)
        case AdminCommand.ADD_TEACHER:
            await _handle_add_teacher(message, state)
        case AdminCommand.ADD_STUDENTS_GROUP:
            await _handle_add_students_group(message, state)
        case AdminCommand.ADD_DISCIPLINE:
            await _handle_add_discipline(message, state)
        case AdminCommand.BAN_STUDENT:
            await create_groups_button(message, 'groupBan')
        case AdminCommand.UNBAN_STUDENT:
            await create_unban_student_buttons(message)
        case AdminCommand.NEXT:
            # –µ—Å–ª–∏ Tg ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ __menu_index,
            # —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ç–æ—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if message.from_user.id not in __menu_index:
                __menu_index[message.from_user.id] = 1
            # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –Ω–∞ —Å–ª–µ–¥. –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
            else:
                __menu_index[message.from_user.id] += 1

            # –∏—Å–∫–æ–º—ã–π –∏–Ω–¥–µ–∫—Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            index = __menu_index[message.from_user.id]

            await message.answer(
                text="–°–º–µ–Ω–∞ –º–µ–Ω—é",
                reply_markup=__menu_list[index](message),
            )
        case AdminCommand.BACK:
            # –µ—Å–ª–∏ Tg ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ __menu_index,
            # —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if message.from_user.id not in __menu_index:
                __menu_index[message.from_user.id] = 0
            # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥. –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
            else:
                __menu_index[message.from_user.id] -= 1
            index = __menu_index[message.from_user.id]
            await message.answer(
                text="–°–º–µ–Ω–∞ –º–µ–Ω—é",
                reply_markup=__menu_list[index](message),
            )
        case AdminCommand.SET_TEACHER_TO_GROUP:
            await create_teachers_button(message, 'assignTeacherGR')
        case AdminCommand.SET_TEACHER_TO_DISCIPLINE:
            ...
        case AdminCommand.DELETE_GROUP:
            ...
        case AdminCommand.DELETE_STUDENT:
            ...
        case AdminCommand.DELETE_TEACHER:
            ...
        case AdminCommand.UPLOAD_TESTS:
            ...
        case AdminCommand.UPLOAD_CONFIGURATION:
            ...
        case AdminCommand.SWITCH_TO_TEACHER:
            ...
        case AdminCommand.DOWNLOAD_FULL_REPORT:
            ...
        case AdminCommand.DOWNLOAD_ANSWER:
            ...
        case AdminCommand.DOWNLOAD_FINISH_REPORT:
            ...
        case AdminCommand.DOWNLOAD_SHORT_REPORT:
            ...
        case AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST:
            ...