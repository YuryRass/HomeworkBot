"""
    –ú–æ–¥—É–ª—å admin_crud.py —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.
"""
from sqlalchemy.exc import IntegrityError
from sqlalchemy import exists, and_

from database.main_db.database import Session
from database.main_db.teacher_crud import is_teacher
from database.main_db.crud_exceptions import (
    DisciplineNotFoundException, GroupAlreadyExistException
)

from model.main_db.admin import Admin
from model.main_db.chat import Chat
from model.main_db.teacher import Teacher
from model.main_db.group import Group
from model.main_db.teacher_group import TeacherGroup
from model.main_db.assigned_discipline import AssignedDiscipline
from model.main_db.teacher_discipline import TeacherDiscipline
from model.main_db.discipline import Discipline
from model.main_db.student import Student
from utils.disciplines_utils import disciplines_works_from_json
from utils.homework_utils import create_homeworks, homeworks_to_json
from model.pydantic.discipline_works import DisciplineWorksConfig
from model.pydantic.students_group import StudentsGroup
from utils.disciplines_utils import disciplines_works_from_json, \
    disciplines_works_to_json, counting_tasks


def is_admin_no_teacher_mode(telegram_id: int) -> bool:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ Telegram ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç
        –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–ø–æ–¥–∞.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        telegram_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.
    """
    with Session() as session:
        admin = session.query(Admin).get(telegram_id)
        if admin is None:
            return False
        return not admin.teacher_mode


def is_admin_with_teacher_mode(telegram_id: int) -> bool:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ Telegram ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç
        –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–ø–æ–¥–∞.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        telegram_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.
    """
    with Session() as session:
        admin = session.query(Admin).get(telegram_id)
        if admin is None:
            return False
        return admin.teacher_mode


def is_admin(telegram_id: int) -> bool:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ Telegram ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        telegram_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.
    """
    with Session() as session:
        admin = session.query(Admin).get(telegram_id)
        return admin is not None


def is_admin_and_teacher(telegram_id: int) -> bool:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ Telegram ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç
        –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        telegram_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.
    """
    _is_admin = is_admin(telegram_id)
    _is_teacher = is_teacher(telegram_id)
    return _is_admin and _is_teacher


def add_chat(chat_id: int) -> None:
    """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Chat
    """

    with Session() as session:
        session.add(Chat(chat_id=chat_id))
        session.commit()


def add_teacher(full_name: str, tg_id: int) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        param full_name (str): –§–ò–û –ø—Ä–µ–ø–æ–¥–∞.
        param tg_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–ø–æ–¥–∞ –≤ —Ç–µ–ª–µ–≥–µ—Ä–∞–º–µ.
    """
    with Session() as session:
        session.add(Teacher(full_name=full_name, telegram_id=tg_id))
        session.commit()


def get_teachers() -> list[Teacher]:
    """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    with Session() as session:
        return session.query(Teacher).all()


def get_not_assign_teacher_groups(teacher_id: int) -> list[Group]:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–µ–ø–æ–¥—É.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        teacher_id (int): ID –ø—Ä–µ–ø–æ–¥–∞.
    """
    with Session() as session:
        # –ø–æ–ª—É—á–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–µ–ø–æ–¥—É
        assign_group = session.query(TeacherGroup).filter(
            TeacherGroup.teacher_id == teacher_id
        )
        assign_group = [it.group_id for it in assign_group]
        # –î–∞–ª–µ–µ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ assign_group
        not_assign_group = session.query(Group).filter(
            Group.id.not_in(assign_group)
        ).all()
        return not_assign_group


def assign_teacher_to_group(teacher_id: int, group_id: int) -> None:
    """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø—Ä–µ–ø–æ–¥—É.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        teacher_id (int): ID –ø—Ä–µ–ø–æ–¥–∞.
        group_id (int): ID –≥—Ä—É–ø–ø—ã.
    """
    with Session() as session:
        session.add(TeacherGroup(teacher_id=teacher_id, group_id=group_id))
        session.commit()

def get_all_groups() -> list[Group]:
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–±–Ω—ã—Ö –≥—Ä—É–ø–ø.
    """
    with Session() as session:
        return session.query(Group).all()


def add_student(full_name: str, group_id: int, discipline_id: int):
    """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î, –∑–∞–ø–æ–ª–Ω—è—è
    —Ç–∞–±–ª–∏—Ü—ã Student –∏ AssignedDiscipline
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        full_name (str): –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞.
        group_id (int): ID –≥—Ä—É–ø–ø—ã.
        discipline_id (int): ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    """
    session = Session()
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = Student(full_name=full_name, group=group_id)
    session.add(student)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î,
    # —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –Ω–µ–µ ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    session.flush()

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –ø–æ –µ–µ ID
    discipline: Discipline = session.query(Discipline).get(discipline_id)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±. —Ä–∞–±–æ—Ç–∞–º –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    empty_homework = create_homeworks(
        disciplines_works_from_json(discipline.works)
    )
    # –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É AssignedDiscipline
    session.add(
        AssignedDiscipline(
            student_id=student.id,
            discipline_id=discipline_id,
            home_work=homeworks_to_json(empty_homework)
        )
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session.commit()
    session.close()

def add_discipline(discipline: DisciplineWorksConfig) -> None:
    """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Discipline
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        discipline (DisciplineWorksConfig): –¥–æ–±–∞–≤–ª—è–µ–º–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.
    """
    with Session() as session:
        session.add(
            Discipline(
                full_name=discipline.full_name,
                short_name=discipline.short_name,
                path_to_test=discipline.path_to_test,
                path_to_answer=discipline.path_to_answer,
                works=disciplines_works_to_json(discipline),
                language=discipline.language,
                max_tasks=counting_tasks(discipline),
                max_home_works=len(discipline.works)
            )
        )
        session.commit()


def add_students_group(student_groups: list[StudentsGroup]) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        student_groups (list[StudentsGroup]): –°–ø–∏—Å–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥—Ä—É–ø–ø.

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        DisciplineNotFoundException: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        GroupAlreadyExistException: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    session = Session()
    session.begin() # –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try:
        for it in student_groups:
            # –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
            group = Group(group_name=it.group_name)
            session.add(group)
            session.flush()

            # –¥–æ–±–∞–≤—è–ª–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students = [Student(full_name=student_raw, group=group.id) for student_raw in it.students]
            session.add_all(students)
            session.flush()

            # –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É AssignedDiscipline
            for discipline in it.disciplines_short_name:
                current_discipline = session.query(Discipline).filter(
                    Discipline.short_name.ilike(f"%{discipline}%")
                ).first()
                if current_discipline is None:
                    raise DisciplineNotFoundException('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '
                                                      f'"{discipline}" –Ω–µ—Ç –≤ –ë–î üòí')

                empty_homework = create_homeworks(
                    disciplines_works_from_json(current_discipline.works)
                )
                session.add_all([
                    AssignedDiscipline(
                        student_id=student.id,
                        discipline_id=current_discipline.id,
                        home_work=homeworks_to_json(empty_homework)
                    ) for student in students]
                )
        session.commit() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    except DisciplineNotFoundException as ex:
        session.rollback()
        raise ex
    except IntegrityError as ex:
        session.rollback()
        raise GroupAlreadyExistException(f'{ex.params[0]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    finally:
        session.close()


def assign_teacher_to_discipline(teacher_id: int, discipline_id: int) -> None:
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–ø–æ–¥—É –¥–∏—Å–∏—Ü–ø–ª–∏–Ω—É.

    Args:
        teacher_id (int): ID –ø—Ä–µ–ø–æ–¥–∞.

        discipline_id (int): ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    """

    with Session() as session:
        session.add(TeacherDiscipline(teacher_id=teacher_id, discipline_id=discipline_id))
        session.commit()

def get_not_assign_teacher_disciplines(teacher_id: int) -> list[Discipline]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥—É.

    Args:
        teacher_id (int): ID –ø—Ä–µ–ø–æ–¥–∞.

    Returns:
        list[Discipline]: —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.
    """

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ LEFT JOIN
    with Session() as session:
        not_assign_teacher_disciplines = session.query(
            Discipline
        ).outerjoin(
            TeacherDiscipline
        ).filter(
            TeacherDiscipline.discipline_id.is_(None)
        ).all()

        return not_assign_teacher_disciplines

def delete_group(group_id: int) -> None:
    """–û—Å—É—â–µ—Å—Ç–≤—è–ª–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –µ—ë ID –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.

    Args:
        group_id (int): ID –≥—Ä—É–ø–ø—ã.
    """
    with Session() as session:
        # —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Group
        session.query(Group).filter(
            Group.id == group_id
        ).delete(synchronize_session='fetch')

        # —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º group_id
        # –≤ —Ç–∞–±–ª–∏—Ü–µ TeacherGroup
        session.query(TeacherGroup).filter(
            TeacherGroup.group_id == group_id
        ).delete(synchronize_session='fetch')

        # —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–±—É—á–∞—é—â–∏—Ö—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        students = session.query(Student).filter(Student.group == group_id).all()

        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç, —Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if not students:
            session.commit()
            return

        # –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã, –æ–±—É—á–∞—é—â–∏–µ—Å—è –≤ –≥—Ä—É–ø–ø–µ —Å ID = group_id,
        # —Ç–æ —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ä–≤–∞ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã AssignedDiscipline
        # (Student - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞), –≥–¥–µ —Ñ–∏–≥—É—Ä–∏—Ä—É—é—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        # –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

        students_id = [it.id for it in students]
        session.query(AssignedDiscipline).filter(
            AssignedDiscipline.student_id.in_(students_id)
        ).delete(synchronize_session='fetch')

        # –í –∫–æ–Ω—Ü–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∂–µ ID
        # –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã Student
        session.query(Student).filter(Student.group == group_id).delete(synchronize_session='fetch')

        session.commit()


def delete_student(student_id: int) -> None:
    """–û—Å—É—â–µ—Å—Ç–≤—è–ª–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.

    Args:
        student_id (int): ID —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    with Session() as session:
        # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ—Ö —Ç–∞–±–ª–∏—Ü –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î,
        # –≥–¥–µ —Ñ–∏–≥—É—Ä–∏—Ä—É—é—Ç –∑–∞–ø–∏—Å–∏ —Å ID —Å—Ç—É–¥–µ–Ω—Ç–∞ = student_id.
        # –¢.–µ. –∏–∑ —Ç–∞–±–ª–∏—Ü Student –∏ AssignedDiscipline.

        session.query(Student).filter(Student.id == student_id).delete(synchronize_session='fetch')
        session.query(AssignedDiscipline).filter(
            AssignedDiscipline.student_id == student_id
        ).delete(synchronize_session='fetch')
        session.commit()


def delete_teacher(teacher_id: int) -> None:
    """–û—Å—É—â–µ—Å—Ç–≤—è–ª–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞ –ø–æ –µ–≥–æ ID –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.

    Args:
        teacher_id (int): ID –ø—Ä–µ–ø–æ–¥–∞.
    """
    with Session() as session:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Teacher
        session.query(Teacher).filter(
            Teacher.id == teacher_id
        ).delete(synchronize_session='fetch')

        # –î–∞–ª–µ–µ –∏–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î,
        # –≥–¥–µ —Ñ–∏–≥—É—Ä–∏—Ä—É—é—Ç –∑–∞–ø–∏—Å–∏ —Å ID –ø—Ä–µ–ø–æ–¥–∞ = teacher_id.
        # –¢.–µ. –∏–∑ —Ç–∞–±–ª–∏—Ü TeacherGroup –∏ TeacherDiscipline.
        session.query(TeacherGroup).filter(
            TeacherGroup.teacher_id == teacher_id
        ).delete(synchronize_session='fetch')

        session.query(TeacherDiscipline).filter(
            TeacherDiscipline.teacher_id == teacher_id
        ).delete(synchronize_session='fetch')

        session.commit()

def get_all_disciplines() -> list[Discipline]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.

    Returns:
        list[Discipline]: —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.
    """
    with Session() as session:
        return session.query(Discipline).all()


def get_discipline(discipline_id: int) -> Discipline:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ –µ–µ ID.

    Args:
        discipline_id (int): ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.

    Returns:
        Discipline: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.
    """
    with Session() as session:
        return session.query(Discipline).get(discipline_id)